{"ast":null,"code":"import _classCallCheck from \"/home/regianeivo/Documents/GoodKarma/GoodKarma/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/regianeivo/Documents/GoodKarma/GoodKarma/frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/regianeivo/Documents/GoodKarma/GoodKarma/frontend/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/regianeivo/Documents/GoodKarma/GoodKarma/frontend/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/regianeivo/Documents/GoodKarma/GoodKarma/frontend/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/regianeivo/Documents/GoodKarma/GoodKarma/frontend/src/components/comment/comment.tsx\";\nimport React from 'react';\nexport var Comment =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Comment, _React$Component);\n\n  function Comment() {\n    _classCallCheck(this, Comment);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Comment).apply(this, arguments));\n  }\n\n  _createClass(Comment, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"table\", {\n        className: \"comment-details\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 22\n        },\n        __self: this\n      }, React.createElement(\"tbody\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 23\n        },\n        __self: this\n      }, React.createElement(\"tr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 24\n        },\n        __self: this\n      }, React.createElement(\"td\", {\n        className: \"left\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 25\n        },\n        __self: this\n      }), React.createElement(\"td\", {\n        className: \"right\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 28\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"audit\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 29\n        },\n        __self: this\n      }, this.renderTimeSinceDate(this.props.date), \" ago by \", this.props.name), React.createElement(\"h2\", {\n        className: \"content\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 30\n        },\n        __self: this\n      }, this.props.text)))));\n    }\n  }, {\n    key: \"renderTimeSinceDate\",\n    value: function renderTimeSinceDate(jsonDate) {\n      var time = Date.parse(jsonDate);\n      var now = new Date().getTime();\n      var difference = (now - time) / 1000;\n      var seconds = Math.ceil(difference);\n      var minutes = Math.ceil(seconds / 60);\n      var hours = Math.ceil(minutes / 60);\n      var days = Math.ceil(hours / 24);\n\n      if (seconds < 60) {\n        return \"\".concat(seconds, \" seconds\");\n      } else if (minutes < 60) {\n        return \"\".concat(minutes, \" minutes\");\n      } else if (hours < 24) {\n        return \"\".concat(hours, \" hours\");\n      } else {\n        return \"\".concat(days, \" days\");\n      }\n    }\n  }]);\n\n  return Comment;\n}(React.Component);","map":{"version":3,"sources":["/home/regianeivo/Documents/GoodKarma/GoodKarma/frontend/src/components/comment/comment.tsx"],"names":["React","Comment","renderTimeSinceDate","props","date","name","text","jsonDate","time","Date","parse","now","getTime","difference","seconds","Math","ceil","minutes","hours","days","Component"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAkBA,WAAaC,OAAb;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA,6BACmB;AACX,aACI;AAAO,QAAA,SAAS,EAAC,iBAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAI,QAAA,SAAS,EAAC,MAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,EAII;AAAI,QAAA,SAAS,EAAC,OAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAK,QAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAwB,KAAKC,mBAAL,CAAyB,KAAKC,KAAL,CAAWC,IAApC,CAAxB,cAA2E,KAAKD,KAAL,CAAWE,IAAtF,CADJ,EAEI;AAAI,QAAA,SAAS,EAAC,SAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAyB,KAAKF,KAAL,CAAWG,IAApC,CAFJ,CAJJ,CADJ,CADJ,CADJ;AAeH;AAjBL;AAAA;AAAA,wCAmBgCC,QAnBhC,EAmBkD;AAC1C,UAAMC,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWH,QAAX,CAAb;AACA,UAAMI,GAAG,GAAG,IAAIF,IAAJ,GAAWG,OAAX,EAAZ;AACA,UAAMC,UAAU,GAAG,CAACF,GAAG,GAAGH,IAAP,IAAe,IAAlC;AACA,UAAMM,OAAO,GAAGC,IAAI,CAACC,IAAL,CAAUH,UAAV,CAAhB;AACA,UAAMI,OAAO,GAAGF,IAAI,CAACC,IAAL,CAAUF,OAAO,GAAG,EAApB,CAAhB;AACA,UAAMI,KAAK,GAAGH,IAAI,CAACC,IAAL,CAAUC,OAAO,GAAG,EAApB,CAAd;AACA,UAAME,IAAI,GAAGJ,IAAI,CAACC,IAAL,CAAUE,KAAK,GAAG,EAAlB,CAAb;;AACA,UAAIJ,OAAO,GAAG,EAAd,EAAkB;AACd,yBAAUA,OAAV;AACH,OAFD,MAEO,IAAIG,OAAO,GAAG,EAAd,EAAkB;AACrB,yBAAUA,OAAV;AACH,OAFM,MAEA,IAAIC,KAAK,GAAG,EAAZ,EAAgB;AACnB,yBAAUA,KAAV;AACH,OAFM,MAEA;AACH,yBAAUC,IAAV;AACH;AACJ;AApCL;;AAAA;AAAA,EAA6BnB,KAAK,CAACoB,SAAnC","sourcesContent":["import React from 'react';\n\nexport interface CommentDetails {\n    id: number;\n    userId: number;\n    name: string;\n    text: string;\n    date: string;\n}\n\ninterface CommentProps extends CommentDetails {\n    // ...\n}\n\ninterface CommentState {\n    //\n}\n\nexport class Comment extends React.Component<CommentProps, CommentState> {\n    public render(){\n        return (\n            <table className=\"comment-details\">\n                <tbody>\n                    <tr>\n                        <td className=\"left\">\n                        \n                        </td>\n                        <td className=\"right\">\n                            <div className=\"audit\">{this.renderTimeSinceDate(this.props.date)} ago by {this.props.name}</div>\n                            <h2 className=\"content\">{this.props.text}</h2>\n                        </td>\n                    </tr>\n                </tbody>\n            </table>\n        );\n    }\n\n    private renderTimeSinceDate(jsonDate: string) {\n        const time = Date.parse(jsonDate);\n        const now = new Date().getTime();\n        const difference = (now - time) / 1000;\n        const seconds = Math.ceil(difference);\n        const minutes = Math.ceil(seconds / 60);\n        const hours = Math.ceil(minutes / 60);\n        const days = Math.ceil(hours / 24);\n        if (seconds < 60) {\n            return `${seconds} seconds`;\n        } else if (minutes < 60) {\n            return `${minutes} minutes`;\n        } else if (hours < 24) {\n            return `${hours} hours`;\n        } else {\n            return `${days} days`;\n        }\n    }\n\n\n}"]},"metadata":{},"sourceType":"module"}