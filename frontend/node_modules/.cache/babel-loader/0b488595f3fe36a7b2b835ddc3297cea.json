{"ast":null,"code":"import _regeneratorRuntime from \"/home/marcos/Desktop/Karma/frontend/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/marcos/Desktop/Karma/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/home/marcos/Desktop/Karma/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/marcos/Desktop/Karma/frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/marcos/Desktop/Karma/frontend/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/marcos/Desktop/Karma/frontend/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/marcos/Desktop/Karma/frontend/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/marcos/Desktop/Karma/frontend/src/pages/linkById.tsx\";\nimport * as React from \"react\";\nimport { Listview } from \"../components/listview/listview\";\nimport { getAuthToken } from \"../components/with_auth/with_auth\"; // component should show only 1 link with its replies\n// GET LINK BY ID\n\nexport var LinkById =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(LinkById, _React$Component);\n\n  function LinkById(props) {\n    var _this;\n\n    _classCallCheck(this, LinkById);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(LinkById).call(this, props));\n    _this.state = {\n      replies: null\n    };\n    return _this;\n  }\n\n  _createClass(LinkById, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        var data;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return getData();\n\n              case 2:\n                data = _context.sent;\n\n                _this2.setState({\n                  replies: data\n                });\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }))();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53\n        },\n        __self: this\n      }, this._renderPrivate());\n    }\n  }, {\n    key: \"_renderPrivate\",\n    value: function _renderPrivate() {\n      var token = getAuthToken();\n\n      if (token) {\n        if (this.state.replies === null) {\n          return React.createElement(\"div\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 62\n            },\n            __self: this\n          }, \"Loading...\");\n        } else {\n          return React.createElement(\"div\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 64\n            },\n            __self: this\n          }, React.createElement(Listview, {\n            items: this.state.replies.map(function (replies) {\n              // count how many replies in each link\n              var comments = Object.keys(replies).length;\n              var c = comments <= 1 ? \"comment\" : \"comments\";\n              return React.createElement(\"div\", {\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 71\n                },\n                __self: this\n              }, React.createElement(\"h6\", {\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 73\n                },\n                __self: this\n              }, \"Posted by \", replies.user.name, \"    \", \"----\", \"      \", replies.date), React.createElement(\"h5\", {\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 74\n                },\n                __self: this\n              }, \" \", comments, \" \", c));\n            }),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 65\n            },\n            __self: this\n          }));\n        }\n      } else {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 82\n          },\n          __self: this\n        }, React.createElement(\"h3\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 83\n          },\n          __self: this\n        }, \"ERROR, You must be logged in to see this link\"));\n      }\n    }\n  }]);\n\n  return LinkById;\n}(React.Component);\n\nfunction getData() {\n  return _getData.apply(this, arguments);\n}\n\nfunction _getData() {\n  _getData = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee2() {\n    var response, json;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return fetch(\"/links\");\n\n          case 2:\n            response = _context2.sent;\n            _context2.next = 5;\n            return response.json();\n\n          case 5:\n            json = _context2.sent;\n            return _context2.abrupt(\"return\", json);\n\n          case 7:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, this);\n  }));\n  return _getData.apply(this, arguments);\n}","map":{"version":3,"sources":["/home/marcos/Desktop/Karma/frontend/src/pages/linkById.tsx"],"names":["React","Listview","getAuthToken","LinkById","props","state","replies","getData","data","setState","_renderPrivate","token","map","comments","Object","keys","length","c","user","name","date","Component","fetch","response","json"],"mappings":";;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,QAAT,QAAyB,iCAAzB;AAEA,SAASC,YAAT,QAA6B,mCAA7B,C,CAIA;AACA;;AA6BA,WAAaC,QAAb;AAAA;AAAA;AAAA;;AACI,oBAAmBC,KAAnB,EAAwC;AAAA;;AAAA;;AACpC,kFAAMA,KAAN;AACA,UAAKC,KAAL,GAAa;AACTC,MAAAA,OAAO,EAAE;AADA,KAAb;AAFoC;AAKvC;;AANL;AAAA;AAAA,wCAO+B;AAAA;;AACvB;AAAA;AAAA,+BAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBACsBC,OAAO,EAD7B;;AAAA;AACSC,gBAAAA,IADT;;AAEG,gBAAA,MAAI,CAACC,QAAL,CAAc;AAAEH,kBAAAA,OAAO,EAAEE;AAAX,iBAAd;;AAFH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAD;AAIH;AAZL;AAAA;AAAA,6BAcoB;AACR,aAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACF,KAAKE,cAAL,EADE,CAAP;AAGP;AAlBL;AAAA;AAAA,qCAoB6B;AACrB,UAAMC,KAAK,GAAGT,YAAY,EAA1B;;AACA,UAAGS,KAAH,EAAS;AACL,YAAI,KAAKN,KAAL,CAAWC,OAAX,KAAuB,IAA3B,EAAiC;AAC7B,iBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAP;AACH,SAFD,MAEO;AACH,iBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aACH,oBAAC,QAAD;AACI,YAAA,KAAK,EACD,KAAKD,KAAL,CAAWC,OAAX,CAAmBM,GAAnB,CAAuB,UAACN,OAAD,EAAa;AAChC;AACA,kBAAIO,QAAQ,GAAGC,MAAM,CAACC,IAAP,CAAYT,OAAZ,EAAqBU,MAApC;AACA,kBAAIC,CAAC,GAAIJ,QAAQ,IAAI,CAAb,GAAkB,SAAlB,GAA8B,UAAtC;AACA,qBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAEH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAK,YAAL,EAAmBP,OAAO,CAACY,IAAR,CAAaC,IAAhC,UAA0C,MAA1C,YAAwDb,OAAO,CAACc,IAAhE,CAFG,EAGH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAAMP,QAAN,OAAiBI,CAAjB,CAHG,CAAP;AAKH,aATD,CAFR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADG,CAAP;AAgBH;AACJ,OArBD,MAqBK;AACD,eAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAM,+CAAN,CADG,CAAP;AAGH;AACJ;AAhDL;;AAAA;AAAA,EAA8BjB,KAAK,CAACqB,SAApC;;SAmDed,O;;;;;;;2BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAC2Be,KAAK,CAAC,QAAD,CADhC;;AAAA;AACUC,YAAAA,QADV;AAAA;AAAA,mBAEuBA,QAAQ,CAACC,IAAT,EAFvB;;AAAA;AAEUA,YAAAA,IAFV;AAAA,8CAGWA,IAHX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["import * as React from \"react\";\nimport { Listview } from \"../components/listview/listview\";\nimport { Link } from \"react-router-dom\";\nimport { getAuthToken } from \"../components/with_auth/with_auth\";\n\n\n\n// component should show only 1 link with its replies\n// GET LINK BY ID\n\n\ninterface RepliesItem {\n    user: {\n        name: string;\n    },\n    reply: {\n        id: number,\n        text: string;\n        userId: number;\n        date: string;\n    },\n    id: number;\n    title: string;\n    question: string;\n    field: string;\n    date: string;\n}\n\n\ninterface RepliesProps {\n    token: string | null;\n}\n\ninterface RepliesState {\n    replies: RepliesItem[] | null;\n}\n\nexport class LinkById extends React.Component<RepliesProps, RepliesState> {\n    public constructor(props: RepliesProps) {\n        super(props);\n        this.state = {\n            replies: null\n        };\n    }\n    public componentDidMount() {\n        (async () => {\n            const data = await getData();\n            this.setState({ replies: data });\n        })();\n    }\n\n    public render() {\n            return <div>\n                {this._renderPrivate()}\n            </div>;\n    }\n\n    private _renderPrivate() {\n        const token = getAuthToken();\n        if(token){\n            if (this.state.replies === null) {\n                return <div>Loading...</div>;\n            } else {\n                return <div>\n                    <Listview\n                        items={\n                            this.state.replies.map((replies) => {\n                                // count how many replies in each link\n                                let comments = Object.keys(replies).length;\n                                let c = (comments <= 1) ? \"comment\" : \"comments\";\n                                return <div>\n                                    \n                                    <h6>{\"Posted by \"}{replies.user.name}    {\"----\"}      {replies.date}</h6>\n                                    <h5> {comments} {c}</h5>\n                                </div>; \n                            })\n                        }\n                    />\n                </div>;\n            }\n        }else{\n            return <div>\n                <h3>{ \"ERROR, You must be logged in to see this link\"}</h3>\n            </div>\n        }\n    }\n}\n\nasync function getData() {\n    const response = await fetch(\"/links\");\n    const json = await response.json();\n    return json as RepliesItem[];\n}\n"]},"metadata":{},"sourceType":"module"}