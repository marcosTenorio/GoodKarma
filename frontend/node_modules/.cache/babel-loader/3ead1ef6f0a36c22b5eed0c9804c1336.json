{"ast":null,"code":"import _regeneratorRuntime from \"/home/marcos/Desktop/Karma/frontend/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/marcos/Desktop/Karma/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/home/marcos/Desktop/Karma/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/marcos/Desktop/Karma/frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/marcos/Desktop/Karma/frontend/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/marcos/Desktop/Karma/frontend/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/marcos/Desktop/Karma/frontend/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/marcos/Desktop/Karma/frontend/src/pages/links.tsx\";\nimport * as React from \"react\";\nimport { Listview } from \"../components/listview/listview\";\nimport { Link } from \"react-router-dom\";\nexport var Links =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Links, _React$Component);\n\n  function Links(props) {\n    var _this;\n\n    _classCallCheck(this, Links);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Links).call(this, props));\n    _this.state = {\n      links: null,\n      query: \"\"\n    };\n    return _this;\n  }\n\n  _createClass(Links, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        var data;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return getData();\n\n              case 2:\n                data = _context.sent;\n\n                _this2.setState({\n                  links: data\n                });\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }))();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      if (this.state.links === null) {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 47\n          },\n          __self: this\n        }, \"Loading...\");\n      } else {\n        var filteredLinks = this.state.links.filter(function (link) {\n          return link.title.indexOf(_this3.state.query) !== -1;\n        });\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 52\n          },\n          __self: this\n        }, React.createElement(\"input\", {\n          className: \"input-text\",\n          placeholder: \"Search\",\n          type: \"text\",\n          onKeyUp: function onKeyUp(e) {\n            return _this3._onSearch(e.currentTarget.value);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 53\n          },\n          __self: this\n        }), React.createElement(Listview, {\n          items: this.state.links.map(function (links) {\n            // counts how many replies in each link\n            var replies = Object.keys(links.reply).length;\n            var s = replies <= 1 ? \"reply\" : \"replies\";\n            return React.createElement(\"div\", {\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 65\n              },\n              __self: this\n            }, React.createElement(\"h6\", {\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 67\n              },\n              __self: this\n            }, \"Posted by \", links.user.name, \"    \", \"----\", \"      \", links.date), React.createElement(\"h4\", {\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 68\n              },\n              __self: this\n            }, links.title, \"    \", \"----\", \"            \", links.field), links.question, \"    \", React.createElement(\"h5\", {\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 69\n              },\n              __self: this\n            }, \" \", React.createElement(Link, {\n              className: \"replies\",\n              to: \"/replies\",\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 69\n              },\n              __self: this\n            }, replies, \" \", s), \" \"));\n          }),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 59\n          },\n          __self: this\n        }));\n      }\n    }\n  }, {\n    key: \"_onSearch\",\n    value: function _onSearch(query) {\n      this.setState({\n        query: query\n      });\n    }\n  }]);\n\n  return Links;\n}(React.Component);\n\nfunction getData() {\n  return _getData.apply(this, arguments);\n}\n\nfunction _getData() {\n  _getData = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee2() {\n    var response, json;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return fetch(\"/links\");\n\n          case 2:\n            response = _context2.sent;\n            _context2.next = 5;\n            return response.json();\n\n          case 5:\n            json = _context2.sent;\n            return _context2.abrupt(\"return\", json);\n\n          case 7:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, this);\n  }));\n  return _getData.apply(this, arguments);\n}","map":{"version":3,"sources":["/home/marcos/Desktop/Karma/frontend/src/pages/links.tsx"],"names":["React","Listview","Link","Links","props","state","links","query","getData","data","setState","filteredLinks","filter","link","title","indexOf","e","_onSearch","currentTarget","value","map","replies","Object","keys","reply","length","s","user","name","date","field","question","Component","fetch","response","json"],"mappings":"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","sourcesContent":["import * as React from \"react\";\r\nimport { Listview } from \"../components/listview/listview\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\n\r\ninterface LinksItem {\r\n    user: {\r\n        name: string;\r\n    },\r\n    reply: {\r\n        id: number,\r\n        text: string;\r\n        userId: number;\r\n    },\r\n    id: number;\r\n    title: string;\r\n    question: string;\r\n    field: string;\r\n    date: string;\r\n}\r\n\r\ninterface LinkssProps {\r\n    //\r\n}\r\n\r\ninterface LinkssState {\r\n    links: LinksItem[] | null;\r\n    query: string;\r\n}\r\n\r\nexport class Links extends React.Component<LinkssProps, LinkssState> {\r\n    public constructor(props: LinkssProps) {\r\n        super(props);\r\n        this.state = {\r\n            links: null,\r\n            query: \"\"\r\n        };\r\n    }\r\n    public componentDidMount() {\r\n        (async () => {\r\n            const data = await getData();\r\n            this.setState({ links: data });\r\n        })();\r\n    }\r\n    public render() {\r\n        if (this.state.links === null) {\r\n            return <div>Loading...</div>;\r\n        } else {\r\n                const filteredLinks = this.state.links.filter((link) => {\r\n                    return link.title.indexOf(this.state.query) !== -1;\r\n                });\r\n                return <div>\r\n                    <input\r\n                        className=\"input-text\"\r\n                        placeholder=\"Search\"\r\n                        type=\"text\"\r\n                        onKeyUp = {(e) => this._onSearch(e.currentTarget.value)}\r\n                    />\r\n                    <Listview\r\n                        items={\r\n                            this.state.links.map((links) => {\r\n                                // counts how many replies in each link\r\n                                let replies = Object.keys(links.reply).length;\r\n                                let s = (replies <= 1) ? \"reply\" : \"replies\";\r\n                                return <div>\r\n                                    \r\n                                    <h6>{\"Posted by \"}{links.user.name}    {\"----\"}      {links.date}</h6>\r\n                                    <h4>{links.title}    {\"----\"}            {links.field}</h4>\r\n                                    {links.question}    <h5> <Link className=\"replies\" to=\"/replies\">{replies} {s}</Link> </h5>\r\n                                </div>; \r\n                            })\r\n                        }\r\n                    />\r\n            </div>;\r\n        }\r\n    }\r\n\r\n    private _onSearch(query: string){\r\n        this.setState({query: query});\r\n    }\r\n    \r\n}\r\n\r\nasync function getData() {\r\n    const response = await fetch(\"/links\");\r\n    const json = await response.json();\r\n    return json as LinksItem[];\r\n}\r\n"]},"metadata":{},"sourceType":"module"}