{"ast":null,"code":"import _regeneratorRuntime from \"/home/marcos/Desktop/Karma/frontend/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/marcos/Desktop/Karma/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/home/marcos/Desktop/Karma/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/marcos/Desktop/Karma/frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/marcos/Desktop/Karma/frontend/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/marcos/Desktop/Karma/frontend/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/marcos/Desktop/Karma/frontend/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/marcos/Desktop/Karma/frontend/src/pages/links.tsx\";\nimport * as React from \"react\";\nimport { Listview } from \"../components/listview/listview\";\nimport { LinkDetails } from \"../components/link_details/link_details\";\nimport { getAuthToken } from \"../components/with_auth/with_auth\";\nvar initialState = {\n  link: null,\n  query: \"\",\n  id: \"\",\n  title: \"\",\n  question: \"\",\n  field: \"\",\n  name: \"\",\n  email: \"\",\n  password: \"\",\n  nameError: \"\",\n  emailError: \"\",\n  passwordError: \"\"\n};\nexport var Links =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Links, _React$Component);\n\n  function Links(props) {\n    var _this;\n\n    _classCallCheck(this, Links);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Links).call(this, props)); // this.state = {\n    //     link: null,\n    //     id: \"\",\n    //     query: \"\",\n    //     title: \"\",\n    //     question: \"\",\n    //     field: \"\"\n    // };\n\n    _this.state = initialState;\n    return _this;\n  }\n\n  _createClass(Links, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      var _this2 = this;\n\n      _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        var data;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return getData();\n\n              case 2:\n                data = _context.sent;\n\n                _this2.setState({\n                  link: data\n                });\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }))();\n    }\n  }, {\n    key: \"componentWillUpdate\",\n    value: function componentWillUpdate() {\n      var _this3 = this;\n\n      _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2() {\n        var data;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return getData();\n\n              case 2:\n                data = _context2.sent;\n\n                _this3.setState({\n                  link: data\n                });\n\n              case 4:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }))();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this4 = this;\n\n      if (this.state.link === null) {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 68\n          },\n          __self: this\n        }, \"Loading...\");\n      } else {\n        var filteredLinks = this.state.link.filter(function (link) {\n          if (link.title.indexOf(_this4.state.query) !== -1) {\n            return link.title.indexOf(_this4.state.query) !== -1;\n          } else if (link.field.indexOf(_this4.state.query) !== -1) {\n            return link.field.indexOf(_this4.state.query) !== -1;\n          }\n        });\n        return React.createElement(\"div\", {\n          className: \"details\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 78\n          },\n          __self: this\n        }, React.createElement(\"input\", {\n          className: \"input-text\",\n          placeholder: \"Search by title or course field\",\n          type: \"text\",\n          onKeyUp: function onKeyUp(e) {\n            return _this4._onSearch(e.currentTarget.value);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 79\n          },\n          __self: this\n        }), this._renderPostEditor(), React.createElement(Listview, {\n          items: filteredLinks.map(function (link, linkIndex) {\n            return (// <Link to={`/link_details/${link.id}`}>\n              React.createElement(LinkDetails, Object.assign({\n                key: linkIndex\n              }, link, {\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 91\n                },\n                __self: this\n              })) // </Link>\n\n            );\n          }),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 86\n          },\n          __self: this\n        }));\n      }\n    }\n  }, {\n    key: \"_renderPostEditor\",\n    value: function _renderPostEditor() {\n      var _this5 = this;\n\n      var token = getAuthToken();\n\n      if (token) {\n        return React.createElement(React.Fragment, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 105\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"link-post\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 106\n          },\n          __self: this\n        }, React.createElement(\"ul\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 108\n          },\n          __self: this\n        }, React.createElement(\"input\", {\n          className: \"input-title\",\n          type: \"text\",\n          placeholder: \"Title\",\n          onKeyUp: function onKeyUp(e) {\n            return _this5._updateTitle(e.target.value);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 109\n          },\n          __self: this\n        }), React.createElement(\"br\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 115\n          },\n          __self: this\n        }), React.createElement(\"textarea\", {\n          className: \"input-text-post\",\n          placeholder: \"write your question here..\",\n          onKeyUp: function onKeyUp(e) {\n            return _this5._updateQuestion(e.target.value);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 116\n          },\n          __self: this\n        }), React.createElement(\"br\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 121\n          },\n          __self: this\n        }), React.createElement(\"label\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 122\n          },\n          __self: this\n        }, \"Course Field: \"), React.createElement(\"select\", {\n          defaultValue: 'DEFAULT',\n          onChange: function onChange(e) {\n            return _this5.setState({\n              field: e.target.value\n            });\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 123\n          },\n          __self: this\n        }, React.createElement(\"option\", {\n          value: \"DEFAULT\",\n          selected: true,\n          disabled: true,\n          hidden: true,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 127\n          },\n          __self: this\n        }, \"Choose here\"), React.createElement(\"option\", {\n          value: \"IT\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 128\n          },\n          __self: this\n        }, \"IT\"), React.createElement(\"option\", {\n          value: \"Business\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 129\n          },\n          __self: this\n        }, \"Business\")), React.createElement(\"button\", {\n          className: \"btn-post\",\n          onClick: function onClick() {\n            return _this5._handleSubmit();\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 131\n          },\n          __self: this\n        }, \"Post\"))), React.createElement(\"br\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 139\n          },\n          __self: this\n        }));\n      } else {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 144\n          },\n          __self: this\n        }, \"Please log in if you wish to create a new post...\", React.createElement(\"br\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 144\n          },\n          __self: this\n        }));\n      }\n    } // Update the state (title) on keyup\n\n  }, {\n    key: \"_updateTitle\",\n    value: function _updateTitle(title) {\n      this.setState({\n        title: title\n      });\n    } // Update the state (question) on keyup\n\n  }, {\n    key: \"_updateQuestion\",\n    value: function _updateQuestion(question) {\n      this.setState({\n        question: question\n      });\n    }\n  }, {\n    key: \"_onSearch\",\n    value: function _onSearch(query) {\n      this.setState({\n        query: query\n      });\n    }\n  }, {\n    key: \"_handleSubmit\",\n    value: function _handleSubmit() {\n      var _this6 = this;\n\n      _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3() {\n        var token, newReply;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.prev = 0;\n                token = getAuthToken();\n\n                if (!token) {\n                  _context3.next = 7;\n                  break;\n                }\n\n                _context3.next = 5;\n                return createPost( //this.state.user.id,\n                _this6.state.title, _this6.state.field, _this6.state.question, token);\n\n              case 5:\n                newReply = _context3.sent;\n\n                _this6.setState(initialState);\n\n              case 7:\n                _context3.next = 11;\n                break;\n\n              case 9:\n                _context3.prev = 9;\n                _context3.t0 = _context3[\"catch\"](0);\n\n              case 11:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this, [[0, 9]]);\n      }))();\n    }\n  }]);\n\n  return Links;\n}(React.Component);\n\nfunction getData() {\n  return _getData.apply(this, arguments);\n}\n\nfunction _getData() {\n  _getData = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee4() {\n    var response, json;\n    return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            _context4.next = 2;\n            return fetch(\"/links\");\n\n          case 2:\n            response = _context4.sent;\n            _context4.next = 5;\n            return response.json();\n\n          case 5:\n            json = _context4.sent;\n            return _context4.abrupt(\"return\", json);\n\n          case 7:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4, this);\n  }));\n  return _getData.apply(this, arguments);\n}\n\nfunction createPost(_x, _x2, _x3, _x4) {\n  return _createPost.apply(this, arguments);\n}\n\nfunction _createPost() {\n  _createPost = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee5(title, field, question, jwt) {\n    var update, response, json;\n    return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            update = {\n              title: title,\n              field: field,\n              question: question\n            };\n            _context5.next = 3;\n            return fetch(\"/links\", {\n              method: \"POST\",\n              headers: {\n                \"Content-Type\": \"application/json\",\n                \"x-auth-token\": jwt\n              },\n              body: JSON.stringify(update)\n            });\n\n          case 3:\n            response = _context5.sent;\n            _context5.next = 6;\n            return response.json();\n\n          case 6:\n            json = _context5.sent;\n            return _context5.abrupt(\"return\", json);\n\n          case 8:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, _callee5, this);\n  }));\n  return _createPost.apply(this, arguments);\n}","map":{"version":3,"sources":["/home/marcos/Desktop/Karma/frontend/src/pages/links.tsx"],"names":["React","Listview","LinkDetails","getAuthToken","initialState","link","query","id","title","question","field","name","email","password","nameError","emailError","passwordError","Links","props","state","getData","data","setState","filteredLinks","filter","indexOf","e","_onSearch","currentTarget","value","_renderPostEditor","map","linkIndex","token","_updateTitle","target","_updateQuestion","_handleSubmit","createPost","newReply","Component","fetch","response","json","jwt","update","method","headers","body","JSON","stringify"],"mappings":"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","sourcesContent":["import * as React from \"react\";\r\nimport { Listview } from \"../components/listview/listview\";\r\nimport { Link } from \"react-router-dom\";\r\nimport * as H from 'history';\r\nimport { LinkDetails, LinkPreviewDetails } from \"../components/link_details/link_details\";\r\nimport { getAuthToken } from \"../components/with_auth/with_auth\";\r\n\r\ninterface LinksProps {\r\n    history: H.History;\r\n    id: string;\r\n}\r\n\r\ninterface LinksState {\r\n    link: LinkPreviewDetails[] | null;\r\n    query: string;\r\n    id: string;\r\n    title: string;\r\n    question: string;\r\n    field: string;\r\n}\r\n\r\nconst initialState = {\r\n    link: null,\r\n    query: \"\",\r\n    id: \"\",\r\n    title: \"\",\r\n    question: \"\",\r\n    field: \"\",\r\n    name: \"\",\r\n    email: \"\",\r\n    password: \"\",\r\n    nameError: \"\",\r\n    emailError: \"\",\r\n    passwordError: \"\"\r\n  };\r\n\r\nexport class Links extends React.Component<LinksProps, LinksState> {\r\n    public constructor(props: LinksProps) {\r\n        super(props);\r\n        // this.state = {\r\n        //     link: null,\r\n        //     id: \"\",\r\n        //     query: \"\",\r\n        //     title: \"\",\r\n        //     question: \"\",\r\n        //     field: \"\"\r\n        // };\r\n        this.state = initialState;\r\n    }\r\n    public componentWillMount() {\r\n        (async () => {\r\n            const data = await getData();\r\n            this.setState({ link: data });\r\n        })();\r\n    }\r\n\r\n\r\n    public componentWillUpdate() {\r\n        (async () => {\r\n            const data = await getData();\r\n            this.setState({ link: data });\r\n        })();\r\n    }\r\n\r\n\r\n    public render() {\r\n        if (this.state.link === null) {\r\n            return <div>Loading...</div>;\r\n        } else {\r\n            const filteredLinks = this.state.link.filter((link) => {\r\n                if(link.title.indexOf(this.state.query) !== -1){\r\n                    return link.title.indexOf(this.state.query) !== -1;\r\n                }else if (link.field.indexOf(this.state.query) !== -1){\r\n                    return link.field.indexOf(this.state.query) !== -1;\r\n                }\r\n                \r\n            });\r\n            return <div className = \"details\">\r\n                <input\r\n                    className=\"input-text\"\r\n                    placeholder=\"Search by title or course field\"\r\n                    type=\"text\"\r\n                    onKeyUp={(e) => this._onSearch(e.currentTarget.value)}\r\n                />\r\n                {this._renderPostEditor()}\r\n                <Listview\r\n                    items={\r\n                        filteredLinks.map((link, linkIndex) => {\r\n                            return (\r\n                                // <Link to={`/link_details/${link.id}`}>\r\n                                    <LinkDetails key={linkIndex} {...link} />\r\n                                // </Link>\r\n                            );\r\n                        })\r\n                    }\r\n                />\r\n            </div>;\r\n        }\r\n    }\r\n\r\n    private _renderPostEditor() {\r\n        const token = getAuthToken();\r\n        if (token) {\r\n            return (\r\n                <React.Fragment>\r\n                    <div className = \"link-post\">\r\n                    \r\n                        <ul>\r\n                        <input\r\n                            className = \"input-title\"\r\n                            type=\"text\"\r\n                            placeholder=\"Title\"\r\n                            onKeyUp={(e) => this._updateTitle((e as any).target.value)}\r\n                        />\r\n                        <br />\r\n                        <textarea\r\n                            className = \"input-text-post\"\r\n                            placeholder=\"write your question here..\"\r\n                            onKeyUp={(e) => this._updateQuestion((e as any).target.value)}\r\n                        />\r\n                        <br />\r\n                        <label>Course Field: </label>\r\n                        <select\r\n                            defaultValue={'DEFAULT'}\r\n                            onChange={e => this.setState({ field: e.target.value })}\r\n                        >\r\n                            <option value=\"DEFAULT\" selected disabled hidden>Choose here</option>\r\n                            <option value=\"IT\">IT</option>\r\n                            <option value=\"Business\">Business</option>\r\n                        </select>\r\n                        <button \r\n                            className = \"btn-post\"\r\n                            onClick={() => this._handleSubmit()}>\r\n                            Post\r\n                        </button>\r\n                        </ul>\r\n                    \r\n                    </div>\r\n                    <br></br>\r\n\r\n                </React.Fragment>\r\n            )    \r\n        } else{\r\n            return <div>Please log in if you wish to create a new post...<br/></div>;\r\n        }\r\n    }\r\n\r\n    // Update the state (title) on keyup\r\n    private _updateTitle(title: string) {\r\n        this.setState({ title: title });\r\n    }\r\n    // Update the state (question) on keyup\r\n    private _updateQuestion(question: string) {\r\n        this.setState({ question: question });\r\n    }\r\n\r\n    private _onSearch(query: string) {\r\n        this.setState({ query: query });\r\n    }\r\n\r\n    private _handleSubmit() {\r\n            (async () => {\r\n                try {\r\n                    const token = getAuthToken();\r\n                    if(token){\r\n                        const newReply = await createPost(\r\n                        //this.state.user.id,\r\n                        this.state.title,\r\n                        this.state.field,\r\n                        this.state.question,\r\n                        token\r\n                        );\r\n                        this.setState(initialState);\r\n                    }\r\n                } catch (err) {\r\n\r\n                }\r\n            })();\r\n    }\r\n}\r\n\r\nasync function getData() {\r\n    const response = await fetch(\"/links\");\r\n    const json = await response.json();\r\n    return json as LinkPreviewDetails[];\r\n}\r\n\r\nasync function createPost(title: string, field: string, question: string, jwt: string) {\r\n    const update = {\r\n        title: title,\r\n        field: field,\r\n        question: question\r\n    };\r\n    const response = await fetch(\r\n        \"/links\",\r\n        {\r\n            method: \"POST\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                \"x-auth-token\": jwt\r\n            },\r\n            body: JSON.stringify(update)\r\n        }\r\n    );\r\n    const json = await response.json();\r\n    return json;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}